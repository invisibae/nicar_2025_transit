---
title: "Using open-source tools to investigate public transit"
author: "Greg Morton"
editor: visual
---

# Using open-source tools to investigate public transit

We're going to use the `r5r` package to investigate public transit in Baltimore.

```{r}
# Load the tidyverse
library(tidyverse)
# r5r will be our routing engine
library(r5r)
# Load the sf package for spatial data
library(sf)
# Load mapview for interactive maps we can use in the notebook
library(mapview)
# We're going to need rjava to run r5r
library(rJava)
# We'll use janitor for some minimal data cleaning
library(janitor)
# readxl for reading in excel files
library(readxl)
# for color scales
library(viridisLite)
# for spatial interpolation 
library(interp)
# for writing stars objects
library(stars)

# load shapes 
bmore_tracts <- 
  read_rds("data/shapes/bmore_tracts.rds")


# Dissolve tract boundaries to create a single Baltimore City boundary
baltimore_boundary <- 
  bmore_tracts %>%
  st_union() %>%          # Union all tracts into one multipolygon
  st_as_sf() %>%          # Convert back to an sf object
  st_cast("POLYGON") %>%  # Ensure itâ€™s a polygon 
  st_make_valid()

# set to EST
Sys.setenv(TZ = "America/New_York")
```

### Part 0: Preparing our data and dependencies

Getting started with `r5r` requires that we be intentional about our setup. To ensure that we get accurate results, we need to make sure the data that will serve as our inputs is accurate and up-to-date.

#### What kind of data do we need?:

-   **OpenStreetMap Network**

    -   Contains raw geographic and transportation-related data from OpenStreetMap, such as roads, pathways, intersections, and their associated metadata.

    -   `r5r` needs a street network to build a multimodal transit network for modeling transit, biking, and walking routes

```{r}
# Usually we would use the `osmdata` package to download OpenStreetMap data, but we've already downloaded the data for you
# You can also find osm.pbf files at https://download.geofabrik.de/ (for example: https://download.geofabrik.de/north-america/us/maryland.html)
# For small or mid-sized cities, it may become necessary to crop the data to a smaller area to avoid memory issues 
# To crop, we'd use osmosis or osmconvert, but we've already done this for you

osm_path <- "data/poa/2025-01-17/baltimore.osm.pbf"
```

-   **GTFS.zip**

    -   Next, we need schedule data from one or more public transit feeds. The more feeds we have, the more modes of transit accessible to our hypothetical travelers.

    -   GTFS is available through most public transit agencies (for example [NYC](https://mta.info/developers), [Chicago](https://www.transitchicago.com/developers/gtfs/) and [LA](https://developer.metro.net/gtfs-schedule-data/))

    -   For this session, we've supplied Baltimore GTFS feeds for Jan. 17

```{r}
gtfs_paths <- c("data/poa/2024-01-17/light_rail_gtfs.zip", "data/poa/2024-01-17/metro_gtfs.zip", "data/poa/local-bus_gtfs.zip")
```

-   **elevation.tif**

```{r}
elevation_path <- "data/poa/2024-08-26/elevation.tif"
```

## Part 1: Building our network

What's happening here?

Since r5r is java-based, we need to use the `rJava` package to set the `JAVA_HOME` environment variable to the location of our Java installation. This is necessary to ensure that r5r can access the Java Virtual Machine (JVM) it needs to run.

```{r}
# Sys.setenv(JAVA_HOME = "/Library/Java/JavaVirtualMachines/openjdk-21.jdk/Contents/Home")
Sys.getenv("JAVA_HOME")
```

Next, we'll initialize the JVM and allocate enough memory for r5r to run. We'll also check the version of Java we're using.

**It is important to remember that `r5r` REQUIRES JDK 21, which won't be the default option on most computers**

The amount of memory you allocate to r5r will depend on the size and complexity of the network you're working with. For us, 8GB should be enough. For larger cities or more difficult routing tasks, you may need to allocate more memory.

```{r}
# start rjava and allocate enough memory for r5r
rJava::.jinit()
options(java.parameters = "-Xm10g")
rJava::.jcall("java.lang.System", "S", "getProperty", "java.version")
# un-comment for session details 
# r5r::r5r_sitrep()
```

Now that we've set up our environment, we can build our network.

the `setup_r5` function will take the OpenStreetMap data, GTFS feeds, and elevation data we've provided and build a multimodal transit network for Baltimore.

It'll take a few minutes to build a network, so let's take a break and come back when it's done.

Don't worry too much about the warnings you see here. Most happen as a result of the way I've cropped the OSM data to make it easier to work with.

```{r}
# setup r5r
r5r_core <- setup_r5(here::here(paste0("data/poa/2025-01-17")),
                     temp_dir = F,
                     verbose = F,
                     overwrite = T
                     )

# make sure it worked
r5r_core
```

What does your transit network look like?

```{r}
transit_net <- r5r::transit_network_to_sf(r5r_core)

transit_net$routes %>% 
  mapview(zcol = "mode")
```

## Part 2: Your First Route

Today we'll be focusing on routes to Western High, the oldest public all-girls school in the United States and one of Baltimore's selective, college-preparatory high schools.

We obtained, through a public records request, home census tracts for students who attend Western High. We'll use this data to model routes to school for a few students.

```{r}
# All origin and destination pairs for Western HS
western_departure_times <- 
  read_rds("data/poa/2025-01-17/travel_times_western_01_17.rds") %>% 
  select(
    census_tract,
    to_id,
    name,
    program,
    departure_time,
    am_bell,
    school_polygon,
    school_point_lat,
    school_point_lon,
    geometry.y,
    tract_point_lat,
    tract_point_lon
  )

western_shape <- 
  western_departure_times %>% 
  st_set_geometry("school_polygon") %>% 
  select(school_polygon) %>% 
  head(1)
```

### Brooke Bourne

We're going to test our transit network by modeling one of our characters' routes to school.

Brooke Bourne told us it took her nearly an hour to get to school every day. We're going to use our transit network to find her quickest route to school on public transit

To find Brooke's route, we'll need to filter our data to find her home census tract and then use the `detailed_itineraries` function to find her route to school.

```{r}
brooke_bourne <- 
  western_departure_times %>%
  filter(census_tract == "24510080800")

brooke_home_tract <- 
  brooke_bourne %>% 
  st_set_geometry("geometry.y") 

brooke_bourne
```

We'll begin by defining the modes of transit that we'll give our commuters access to. We'll use "WALK" and "TRANSIT" for now, but we could also include "CAR" or "BIKE" if we wanted to.

```{r}
# Define modes of transit that we'll give our commuters access to 
mode <- c("WALK", "TRANSIT") 
```

Unfortunately, r5 is picky about the format of the data we give it. We need to make sure that our data is in the right format before we can use it to find routes.

We have to do some data cleaning to get our data in the right format. We'll pivot our data so that the home and school lat-lon pairs are on different rows. We'll also create an id column to identify the routes in the output. Why on different rows? because r5 requires that origin/destination pairs have different unique IDs, latitudes, and longitudes.

```{r}
one_row_test <-
  brooke_bourne %>% 
  # r5 needs to take origins and destinations as strings rather than sf 'geometry' objects
    mutate(school_lat_lon = paste0(school_point_lat, ",", school_point_lon),
           home_tract_lat_lon = paste0(tract_point_lat, ",", tract_point_lon)) %>%
  # To make things easier on ourselves, we'll pivot the data so home lat-lon and school lat-lon are on different rows 
  pivot_longer(
    cols = c("home_tract_lat_lon", "school_lat_lon"),
    names_to = "coord_type",
    values_to = "coord") %>% 
  # This id column will be used to identify the routes in the output
  mutate(id = ifelse(
    coord_type == "home_tract_lat_lon", 
    janitor::make_clean_names(census_tract), 
    str_replace_all(stringr::str_to_lower(program), " ", "_"))
    ) %>% 
  # Next we'll separate the lat and lon columns 
  mutate(lat = map_dbl(.$coord, ~as.double(str_split(., ",")[[1]][1])),
         lon = map_dbl(.$coord, ~as.double(str_split(., ",")[[1]][2]))) %>%
  dplyr::select(
                program,
                departure_time,
                name,
                census_tract,
                coord_type,
                id,
                lat,
                lon,
                am_bell
  )

one_row_test 
```

Now that we have our data in the right format, we can use the `detailed_itineraries` function to find Brooke's route to school.

By default, `detailed_itineraries` will return the fastest route to school. We can also specify that we want the shortest route by setting `shortest_path = T`.

Below we'll compare Brooke's shortest route on public transit to her shortest route by car.

```{r}
# What is Brooke's shortest route on public transit?
public_transit <- 
  detailed_itineraries(
    r5r_core,
    origins = one_row_test[1,],
    destinations = one_row_test[2,],
    mode = mode,
    departure_datetime = one_row_test$departure_time[1],
    # by default, r5 will give the traveler a 10 minute window to begin their trip. We don't want that here.
    time_window = 1L
    ) %>% 
  st_as_sf() 
 
# What is Brooke's shortest route by car?
car <- 
  detailed_itineraries(
    r5r_core,
    origins = one_row_test[1,],
    destinations = one_row_test[2,],
    mode = "CAR",
    departure_datetime = one_row_test$departure_time[1]
    )%>% 
  st_as_sf() 
```

How is routing data structured?

```{r}
public_transit %>% 
  kableExtra::kbl() %>% 
  kableExtra::kable_material_dark()
```

What does it look like on a map?

```{r}
mapview(public_transit, zcol = "mode") +
  mapview(car, zcol = "mode") +
  mapview(western_shape) +
  mapview(brooke_home_tract)
```

But that's not it! While `detailed_iteneraries` suggests the fastest route by default, it is also quite flexible!

We can specify a time window for our route, which will return all routes that are within the specified time window of the fastest route. This is useful for finding alternative routes that may be more convenient or scenic. While it's logical for travelers to choose the fastest route, they may also want to consider other factors like the number of transfers, the amount of walking involved or the reliability of the route.

Let's see what Brooke's options look like if she's willing to spend an extra 20 minutes on her commute.

```{r}
public_transit_options  <- 
  detailed_itineraries(
    r5r_core,
    origins = one_row_test[1,],
    destinations = one_row_test[2,],
    mode = mode,
    departure_datetime = one_row_test$departure_time[1],
    shortest_path = F,
    time_window = 10L
    )

public_transit_options %>% 
  kableExtra::kbl() %>% 
  kableExtra::kable_material_dark()
```

Let's check out her options

```{r}
mapview(public_transit_options, zcol = "option") + 
  mapview(western_shape) +
  mapview(brooke_home_tract)
```

## Part 3: Accessibility

### Selective Schools

We use r5r's `accessibility` function to quantify access to opportunity.

In this case, we'll measure access to Baltimore's selective high schools. In addition to achieving a high enough composite score and meeting all entrance criteria, students have to find a way to get to Baltimore's best public schools.

```{r}
# Load school shapes and filter for selective schools 
selective_school_parcels <- 
  st_read("data/shapes/school_parcels.geojson") %>% 
  filter(
    str_detect(str_to_lower(schools_at_parcel), "poly|western|dunbar|bard|city college|baltimore school for the")
  ) %>% 
  distinct(school_number, .keep_all = T) %>% 
  mutate(
    point = st_centroid(geometry),
    lon = map_dbl(point, ~st_coordinates(.)[1]),
    lat = map_dbl(point, ~st_coordinates(.)[2]),
    id = schools_at_parcel,
    schools = 1
    ) %>%
  st_set_geometry("point") 

mapview(baltimore_boundary, alpha.regions = 0.1) +
mapview(selective_school_parcels, col.regions = "blue")
```

We'll measure accessibility from a point sampled from within every census tract.

*BE CAREFUL WHEN YOU'RE SELECTING STARTING POINTS*

To ensure realism, you'll want to take steps to ensure you're not starting trips from random locations. Our starting points are a random sample from the EU Global Human Settlement raster, above a minimum estimated density and excluding parks, schools, and waterfront industrial areas.

```{r}
# load sample points for each census tract
bmore_tracts_sampled <- st_read("data/shapes/bmore_grid_sampled_01_27.geojson") %>% 
    mutate(
    lon = map_dbl(geometry, ~st_coordinates(.)[1]),
    lat = map_dbl(geometry, ~st_coordinates(.)[2]),
    ) %>% 
  mutate(id = GEOID) %>% 
  st_set_geometry("geometry")
  

bmore_tracts_sampled %>% 
  mapview(col.region = "red") +
  mapview(bmore_tracts, alpha.regions = 0.1) 
```

Just like with `detailed_iteneraries` we'll use our arguments in r5r's `accessibility` function to define the constraints that we'll impose on the commutes we're modeling.

Once again, we'll give our riders access to only public walking and public transit. But this time, we'll only allow for commutes 30 minutes or less.

The function will return the number of schools accessible within 30 minutes.

```{r}
# routing inputs
mode <- c("WALK", "TRANSIT")
max_walk_time <- 30      # in minutes
time_window <- 15      # in minutes
travel_time_cutoff <- 30 # in minutes
departure_datetime <- as.POSIXct("17-01-2025 6:30:00",
                                 format = "%d-%m-%Y %H:%M:%S")


access <- r5r::accessibility(r5r_core,
                        origins = bmore_tracts_sampled,
                        destinations = selective_school_parcels,
                        mode = mode,
                        opportunities_colnames = c("schools"),
                        decay_function = "step",
                        cutoffs = travel_time_cutoff,
                        departure_datetime = departure_datetime,
                        max_walk_time = max_walk_time,
                        time_window = time_window,
                        progress = FALSE)

access %>% 
  head(5)
```

We can visualize our results to get a look at which parts of the city have the best access to selective schools.

```{r}
sample_map  <- bmore_tracts_sampled %>% 
  left_join(access) %>% 
  mapview(zcol = "accessibility", 
          col.regions = viridisLite::cividis(2),
          at = seq(0, 2, by = .5)  # Custom breaks from 0 to 2
  )

bmore_tracts %>% 
  mapview()

mapview(bmore_tracts, alpha.regions = 0.1) +
  sample_map +
  mapview(selective_school_parcels, col.regions = "red") 
```

There's a lot of useful information in that map. But we have some more work to do to communicate those ideas visually.

To visualize access we'll use a heatmap.

We'll by applying some spatial interpolation with the `interp` package. The idea here is to generate accessibility estimates for the space between the points we've chosen to represent each census tract.

```{r}
# spatial interpolation 
access_schools <- access %>% 
  filter(opportunity == "schools") %>%
  inner_join(bmore_tracts_sampled, by='id') %>%
  with(interp::interp(lon, lat, accessibility, duplicate = "mean")) %>% 
  with(cbind(acc=as.vector(z),  # Column-major order
             x=rep(x, times=length(y)),
             y=rep(y, each=length(x)))) %>% as.data.frame() %>% na.omit() %>% 
  mutate(opportunity = "schools")

# get bounding box
bb_x <- c(min(access_schools$x), max(access_schools$x))
bb_y <- c(min(access_schools$y), max(access_schools$y))
bb <- st_bbox(c(xmin = bb_x[1], ymin = bb_y[1], xmax = bb_x[2], ymax = bb_y[2]), crs = 4326)
```

Next, we'll transform our interpolated data into a `stars` object and visualize.

```{r}
# Convert your contour data into a stars object
# Convert to stars and set CRS (assuming EPSG:4326)
contour_stars <- na.omit(access_schools) %>%
  select(x, y, acc) %>%
  st_as_stars(dims = c("x", "y"), values = "acc") %>%
  st_set_crs(4326)  


# Create a mapview layer for the contour with a viridis palette
contour_layer <- mapview(contour_stars, col.regions = viridis::viridis(20, option = "B", direction = -1), 
                        alpha.regions = 0.7, legend = TRUE, at = seq(min(access_schools$acc, na.rm = TRUE), 
                                                                      max(access_schools$acc, na.rm = TRUE), length.out = 20))

contour_layer 
```

Finally, we'll crop it to make it look a bit cleaner

```{r}
contour_stars <- st_transform(contour_stars, st_crs(baltimore_boundary)) %>% st_as_sf()

contour_cropped <- st_crop(contour_stars, st_bbox(baltimore_boundary))
contour_clipped <- st_intersection(contour_cropped, baltimore_boundary) 

# Visualize the result
mapview(baltimore_boundary, alpha.regions = .1) +
  mapview(contour_clipped, alpha.regions = 0.75, col.regions = viridis::viridis(20, option = "B", direction = -1)) 
```

You can use `ggplot`, `geom_sf` and `ggsave` to create SVG versions of heatmap objects that you can export for graphics.

```{r}
ggplot() +
  geom_sf(data = baltimore_boundary, fill = NA, color = "black") +
  geom_sf(data = contour_clipped, aes(fill = acc), alpha = 1) + 
  scale_fill_gradientn(
  colors = c("#001F4D","#6694BA","#99B7D1", "#CCDBE8","#FFE698","#FFD772", "#F9AC00"),  # Custom gradient
  name = "Accessibility" ) +
  coord_sf() +
  theme_void()


```

```{r}
# stop r5
r5r::stop_r5(r5r_core)
```
